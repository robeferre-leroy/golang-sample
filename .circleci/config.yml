version: 2
jobs:
  build:
    machine: true
    steps:
      - checkout
      - run: |
          BRANCH=`echo $CIRCLE_BRANCH | cut -d'/' -f 2`
          docker build -t gcr.io/golang-demo:$BRANCH .
      # - setup_remote_docker:
      #     docker_layer_caching: true
  test:
    docker:
      - image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run: echo 'testing here...'
workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test


# version: 2.0
# jobs:
#   untagged-build:
#     jobs:
#       - build
#   tagged-build:
#     jobs:
#       - build:
#           filters:
#             tags:
#               only: /^v.*/
#   test:
#     steps:
#       - run: echo "Testting..."
# workflows:
#   version: 2
#   dev_stage_pre-prod:
#     jobs:
#       - test_dev:
#           filters:  # using regex filters requires the entire branch to match
#             branches:
#               only:  # only branches matching the below regex filters will run
#                 - dev
#                 - development
#                 - /feature*/
#       - test_stage:
#           filters:
#             branches:
#               only: stage
#       - test_pre-prod:
#           filters:
#             branches:
#               only: /pre-prod(?:-.+)?$/

# version: 2.0
# jobs:
#   check-and-build-only:
#     executor: docker
#     steps:
#       - checkout
#       - docker/check
#       - docker/build:
#           image: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
# workflows:
#   version: 2
#   build-deploy:
#     jobs:
#       - build:
#           filters:
#             branches:
#               ignore:

#                 - develop
#                 - /feature-.*/
#       - test:
#       - deploy-stage:
#           requires:
#             - build
#           filters:
#             branches:
#               only: staging
#       - deploy-prod:
#           requires:
#             - build
#           filters:
#             branches:
#               only: master
#             tags:
#               only: /v.*/

# version: 2.1
# orbs:
#   docker: circleci/docker@0.5.13
#   gcp-gke: circleci/gcp-gke@0.1.0
#   gcr: circleci/gcp-gcr@0.0.2
# jobs:
#   build:
#     description: Docker Build
#     # machine option runs your jobs in a dedicated, ephemeral VM that has the following specifications:
#     machine: true
#     steps:
#       - checkout
#       # Install node
#       - node/install
#       # Install npm
#       - node/install-npm
#       # Download and cache dependencies
#       - node/with-cache:
#           steps:
#             - run:
#                 name: Install application dependencies
#                 command: npm install
#           # Save cache
#           cache-key: package.json
#           # Ignore non-checksum cache hits
#           use-strict-cache: true
#   Build-Push-Image-Docker:
#     description: Build and push image to Google Container Registry
#     machine: true
#     steps:
#       - checkout
#       - gcr/gcr-auth
#       - gcr/build-image:
#           image: circle-gke
#           tag: "v2" #Change version number e.g to 'v3' when updating application
#       - gcr/push-image:
#           image: circle-gke
#           tag: "v2" #Change version number e.g to 'v3' when updating application
#
#   deploy:
#     description: Deploy application to Google Kubernetes Engine
#     machine: true
#     steps:
#       # Install `gcloud` and `kubectl` if not already installed.
#       - gcp-gke/install
#       # Initialize the `gcloud` CLI.
#       - gcp-gke/init
#       # Update a deployment Docker image.
#       - gcp-gke/rollout-image:
#           deployment: circle-ci-cluster
#           container: dominic-backend
#           image: gcr.io/circle-ci-demo/circle-gke:v2 # change version when updating
# workflows:
#   build_update_deploy:
#     jobs:
#       - build
#       - Build-Push-Image-Docker:
#           requires:
#             - build
#       - deploy:
#           requires:
#             - Build-Push-Image-Docker
